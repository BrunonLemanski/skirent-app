package pl.leman.rentapi.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import pl.leman.rentapi.exceptions.category.ItemsCategoryIdException;
import pl.leman.rentapi.exceptions.item.ItemQrCodeException;
import pl.leman.rentapi.model.Item;
import pl.leman.rentapi.repository.ItemRepository;
import pl.leman.rentapi.repository.ItemsCategoryRepository;

import java.util.Optional;

/**
 * @author Brunon Lemański
 * @version 1.0
 */
@Service
public class ItemService {

    @Autowired
    private ItemsCategoryRepository itemsCategoryRepository;

    @Autowired
    private ItemRepository itemRepository;

    /**
     * Adding new Item to database with specific ItemCategory. If not found ItemCategory, throw Exception.
     * @param item Object Item.
     * @param categoryId ID of specific category required to creating new Item.
     * @return Valid item or Exception with message.
     */
    public Item addNewItem(Item item, Long categoryId) {
        //TODO: poprawić aby działa walidacja Hibernate
        return itemsCategoryRepository.findById(categoryId)
                .map(itemsCategory -> {
                    item.setItemCategory(itemsCategory);
                    return itemRepository.save(item);
                }).orElseThrow(() -> new ItemsCategoryIdException("Kategoria z ID: " + categoryId + " nie istnieje w bazie."));
    }

    /**
     * Updating Item.
     * @param updatedItem Object Item intended for update.
     * @param code QR Code required to find a search record.
     * @return Save valid object or method findByQrCode() returnerd error message.
     */
    public Item updateItem(Item updatedItem, String code) {
        //Item item1 = itemRepository.findByQrCode(code);
        Item item1 = findByQrCode(code);
        String qr = item1.getQrCode();

        item1 = updatedItem;
        item1.setQrCode(qr);

        return itemRepository.save(item1);
    }

    /**
     * Get all items from database.
     * @return List of items.
     */
    public Iterable<Item> findAllItems() {
        return itemRepository.findAll();
    }

    /**
     * Get item by unique QR Code.
     * @param qrCode QR Code by which the record will be found.
     * @return Searched rekord or returned error message.
     */
    public Item findByQrCode(String qrCode) {
        Item item = itemRepository.findByQrCode(qrCode);

        if(item == null) {
            throw new ItemQrCodeException("Brak '" + qrCode + "' w bazie danych");
        }

        return item;
    }

    /**
     * Deleting item by QR Code.
     * @param qr QR Code by which the record will be found.
     */
    public void deleteItemByQrCode(String qr) {

        Item item = itemRepository.findByQrCode(qr);

        if(item == null) {
            throw new ItemQrCodeException("Brak wpisu w bazie danych");
        }

        itemRepository.delete(item);
    }

    /**
     * Getting item by ID (Key).
     * @param id Unique Key which is autogenerated during creating Item.
     * @return Object Item or returned error message.
     */
    public Optional<Item> findItemById(Integer id) {
        Long idLong = Long.valueOf(id);
        Optional<Item> item = itemRepository.findById(idLong);

        if(!item.isPresent()) {
            throw new ItemQrCodeException("Brak wpisu w bazie");
        }

        return item;
    }
}